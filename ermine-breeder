#!/bin/sh
#
# Copyright (C) 2016 Masami Hiramatsu <masami.hiramatsu@gmail.com>
# This program is released under the MIT License, see LICENSE.
#
set -e

abspath() {
  (cd $1; pwd)
}

# Workspaces
TOPDIR=`dirname $0`
TOPDIR=`abspath $TOPDIR`
WORKDIR=$TOPDIR/work
DLDIR=$TOPDIR/download
LIBEXEC=$TOPDIR/libexec
DESTDIR=$LIBEXEC/ermine

# Get the latest stable tree
get_latest_kernel_url() {
  curl -s -L http://www.kernel.org/ | grep -A1 'id="latest_link"' | tail -n 1 | cut -d\" -f 2
}

# Download sources
LINUX_URL=`get_latest_kernel_url`
BUSYBOX_URL=http://busybox.net/downloads/busybox-1.26.2.tar.bz2
LIBCAP_URL=https://github.com/mhiramat/libcap/archive/capsh-exec-v1.zip

# Cross tools
GCC_arm64_URL=http://releases.linaro.org/components/toolchain/binaries/latest-6/aarch64-linux-gnu/gcc-linaro-6.2.1-2016.11-x86_64_aarch64-linux-gnu.tar.xz
CROSS_COMPILE_arm64=aarch64-linux-gnu-
GCC_arm_URL=http://releases.linaro.org/components/toolchain/binaries/latest-6/arm-linux-gnueabi/gcc-linaro-6.2.1-2016.11-x86_64_arm-linux-gnueabi.tar.xz
CROSS_COMPILE_arm=arm-linux-gnueabi-

# Build params
JOBS=`nproc`
BUILD_MOD=no

# Dummy functions for additional configurations
user_configure_kernel() {
  return
}
user_configure_busybox() {
  return
}

cleanup_workdir() {
  rm -rf $WORKDIR
}
cleanup_dldir() {
  rm -rf $DLDIR
}
cleanup_destdir() {
  rm -rf $DESTDIR
}

prepare_workspaces() {
  mkdir -p $DLDIR
  mkdir -p $WORKDIR
  mkdir -p $DESTDIR
}

extract_source() { # file todir
 echo "Extracting $1"
 case $1 in
 *.tar*|*tgz)
   tar -xf $1 -C $2 --no-same-owner ;;
 *.zip)
   unzip -d $2 $1 ;;
 *)
   echo "$1 is not supported archive format."
   exit 1 ;;
 esac
}

download_source() { # url todir
  (cd $DLDIR
  target=${1##*/}
  if [ ! -f $target ]; then
    echo "Downloading $1"
    wget -c $1
  fi
  if [ ! -d $2 ]; then
    mkdir -p $2
    extract_source $target $2
  fi
  )
}

git_source() { # url todir
  if [ ! -d $2 ]; then
    mkdir $2
    (cd $2; git clone --depth=1 $1 )
  fi
}

file_source() { # url todir
  path=${1#*/}
  if [ ! -d $2 ]; then
    mkdir -p $2
    if [ -f $path ]; then
      extract_source $path $2
    elif [ -d $path ]; then
      echo "Link $path"
      ln -s $path $2/
    else
      echo "Error: File not found: $path" && exit 1
    fi
  fi
}

setup_source() { # url todir
  scheme=${1%%:/*}
  ext=${1##*.}
  [ $ext = "git" ] && scheme=git
  case $scheme in
  http|https|ftp)
    download_source $1 $2
    ;;
  git)
    git_source $1 $2
    ;;
  file)
    file_source $1 $2
    ;;
  esac
}

kconfig_set() { # entry value
  sed -i "/.*CONFIG_${1}[= ].*/d" $OUTDIR/.config
  echo "CONFIG_${1}=${2}" >> $OUTDIR/.config
}

kconfig_string() { # entry string
  kconfig_set $1 \"$2\"
}

kconfigs_y() { # entries
  while [ $# -ne 0 ]; do
    kconfig_set ${1} y
    shift 1
  done
}

kconfigs_n() { # entries
  while [ $# -ne 0 ]; do
    kconfig_set ${1} n
    shift 1
  done
}

configure_kernel() { # outdir
  make defconfig O=$1
  user_configure_kernel $1
  kconfig_string DEFAULT_HOSTNAME "ermine"
  # fundamental features
  kconfigs_y NET NET_CORE NETDEVICES TTY INET IP_PNP IP_PNP_DHCP BINFMT_ELF
  # config minc related configs
  kconfigs_y OVERLAY_FS NAMESPACES UTS_NS IPC_NS USER_NS PID_NS NET_NS \
    CGROUPS EVENTFD CGROUP_DEVICE CPUSETS CGROUP_CPUACCT \
    PAGE_COUNTER MEMCG MEMCG_SWAP MEMCG_SWAP_ENABLED MEMCG_KMEM \
    CGROUP_PERF CGROUP_SCHED CGROUP_HUGETLB FAIR_GROUP_SCHED \
    CGROUP_PIDS CGROUP_FREEZER CFS_BANDWIDTH RT_GROUP_SCHED \
    BLK_CGROUP

  if [ $ARCH = um ]; then
    # config user mode linux configs
    kconfigs_y HOSTFS UML_NET UML_NET_TUNTAP PTY_CHAN NULL_CHAN TTY_CHAN \
	    BINFMT_MISC BLOCK BLK_DEV BLK_DEV_INITRD
  else
    # config kvm configs (for older arm/arm64 kernels)
    kconfigs_y VIRTUALIZATION HYPERVISOR_GUEST PARAVIRT KVM_GUEST \
      PCI PCI_MSI VIRTIO BLOCK BLK_DEV BLK_DEV_INITRD \
      VIRTIO_PCI VIRTIO_BLK VIRTIO_CONSOLE VIRTIO_NET VIRTIO_INPUT \
      NETWORK_FILESYSTEMS NET_9P NET_9P_VIRTIO 9P_FS 9P_FS_POSIX_ACL
  fi
  if [ $ARCH = arm -o $ARCH = arm64 ]; then
    kconfigs_y ARM_AMBA SERIAL_AMBA_PL011 SERIAL_AMBA_PL011_CONSOLE
  elif [ $ARCH = x86_64 -o $ARCH = i386 ]; then
    kconfigs_y SERIAL_8250 SERIAL_8250_CONSOLE
  fi
  make olddefconfig O=$1
}

build_kernel() { # workdir rebuild
  VMLINUZ=$DESTDIR/vmlinuz.$ARCH
  [ -f $VMLINUZ -a "$2" -eq 0 ] && return 0
  export OUTDIR=$1/build-${ARCH}/
  [ "$2" -ne 0 ] && rm -rf $OUTDIR
  (cd $1/linux*/
  configure_kernel $OUTDIR
  case $ARCH in
    x86_64|i386)
    make bzImage -j $JOBS O=$OUTDIR
    cp -f $OUTDIR/arch/x86/boot/bzImage $VMLINUZ
    ;;
    arm)
    make zImage -j $JOBS O=$OUTDIR
    cp -f $OUTDIR/arch/arm/boot/zImage $VMLINUZ
    ;;
    arm64)
    make Image.gz -j $JOBS O=$OUTDIR
    cp -f $OUTDIR/arch/arm64/boot/Image.gz $VMLINUZ
    ;;
    um)
    make vmlinux -j $JOBS O=$OUTDIR
    cp -f $OUTDIR/vmlinux $VMLINUZ
    ;;
  esac
  )
}

build_module() { # workdir rootfsdir
  export OUTDIR=$1/build-${ARCH}/
  mkdir -p $2/lib/modules
  (cd $1/linux*/
  make modules -j $JOBS O=$OUTDIR
  INSTALL_MOD_PATH=$2 make modules_install -j $JOBS O=$OUTDIR
  )
}

build_busybox() { # workdir rootfsdir
  [ -d $2 ] && return 0
  (cd $1/busybox*/
  OUTDIR=`pwd`
  make defconfig
  user_configure_busybox
  kconfigs_y STATIC
  kconfigs_n HUSH FEATURE_BASH_IS_NONE
  kconfigs_y ASH FEATURE_SH_IS_ASH FEATURE_BASH_IS_ASH
  make busybox -j $JOBS
  make install
  cp -R _install $2
  )
}

build_libcap() { # workdir rootfsdir
  [ -f $2/usr/sbin/capsh ] && return 0
  (cd $1/libcap*/
  make clean
  make DYNAMIC=no BUILD_CC=gcc CC=${CROSS_COMPILE}gcc
  mkdir -p $2/usr/sbin/
  cp progs/capsh $2/usr/sbin/
  ${CROSS_COMPILE}strip $2/usr/sbin/capsh
  )
}

install_mincs() { # rootfsdir
  (cd $TOPDIR
  PREFIX=$1/usr/ LIBEXEC=/usr/libexec ./install.sh
  rm -rf $1/usr/libexec/ermine
  )
}

setup_rootfs() { # rootfsdir
  (cd $1
  mkdir -p dev sys proc mnt tmp etc
  chmod 1777 tmp

  cat > etc/rc.local << EOF
#!/bin/sh
mount -t devtmpfs dev /dev 2> /dev/null
mount -t proc proc /proc
mount -t sysfs sysfs /sys
mount -t tmpfs tmpfs /tmp
mount -t tmpfs tmpfs /sys/fs/cgroup/

mkdir /sys/fs/cgroup/cpu
mount -t cgroup -o cpu cgroup /sys/fs/cgroup/cpu
mkdir /sys/fs/cgroup/memory
mount -t cgroup -o memory cgroup /sys/fs/cgroup/memory
EOF
  chmod a+x etc/rc.local

  cat > mincshell.sh << EOF
#!/bin/sh
mount_host() {
  if grep -q hostfs /proc/filesystems ; then
    mount -t hostfs -o / minc /mnt
  else
    mount -t 9p -o trans=virtio,version=9p2000.L,posixacl,cache=none minc /mnt
  fi
  return $?
}

run_minc() {
if mount_host; then
  if [ -f /mnt/run.sh ]; then
    /bin/cttyhack sh /mnt/run.sh
    exec poweroff
  fi
fi
}
mount | grep -q /mnt || run_minc
echo "=== Ermine operating console ==="
echo
exec /bin/sh
EOF
  chmod a+x mincshell.sh

  cat > etc/inittab << EOF
::sysinit:/etc/rc.local
::restart:/sbin/init
::ctrlaltdel:/sbin/reboot
${QEMU_TTY}::respawn:/bin/cttyhack /mincshell.sh
EOF

  ln -sf /sbin/init init
)
}

pack_initramfs() { # rootfsdir
  (cd $1
   find . | cpio -H newc -o | gzip > $DESTDIR/initramfs.$ARCH
  )
}

# Include prepare_arch and minc_moult
. $LIBEXEC/minc-moult

test_run() {
  if [ "$1" = "--debug" ]; then
    set -x
    shift 1
  fi
  if [ "$1" = "--arch" ]; then
    ARCH=$2
    shift 2
  fi
  if [ "$1" -a -d "$1" ]; then
     WORKDIR=`abspath $1`
     shift 1
  fi
  QEMU_OPT="$@"
  prepare_arch "$ARCH" # to get QEMU_TTY
  minc_moult "$ARCH" $WORKDIR "ro console=${QEMU_TTY}"
}

run_selfbuild() {
  if [ -d "$1" ]; then
    echo "Use $1 as a new world"
    NEWDIR=$1
    shift 1
  else
    echo "Making a new world: it may take a while"
    mkdir -p $WORKDIR/debian
    sudo debootstrap --include=wget,build-essential,git,gawk,cpio,bc,unzip jessie\
         $WORKDIR/debian
    NEWDIR=$WORKDIR/debian
  fi
  ${TOPDIR}/minc --nopriv $NEWDIR -b ${TOPDIR}:/opt /opt/ermine-breeder build $@
}

usage() {
  cat << EOF
Usage: $0 <CMD> [OPTS]

 commands:
  build 	Build ermine by using host toolchain (default)
  clean 	Cleanup workdir
  distclean	Cleanup workdir, download and ermine image
  selfbuild [DIR] [OPTS]
		Setup new rootfs and build (will need sudo)
  testrun [--arch <ARCH>] [DIR]
		Run qemu with ermine image
  help  	Show this message

 options:
    --arch <ARCH>
		Build ermine for ARCH (x86_64, arm, arm64)
    --repack	Rebuild ermine image without cleanup workdir
    --rebuild	Rebuild ermine image with cleanup workdir
    --config [CONF_FILE]
		Use CONF_FILE for config
    --debug	Show all commands (set -x)

EOF
  exit 0
}

[ $# -ne 0 ] && case "$1" in
  clean)
  cleanup_workdir
  exit 0
  ;;
  distclean)
  cleanup_workdir
  cleanup_dldir
  cleanup_destdir
  exit 0
  ;;
  selfbuild)
  shift 1
  run_selfbuild $*
  exit 0
  ;;
  testrun)
  shift 1
  test_run $*
  exit 0
  ;;
  build|-*)
  [ "$1" = build ] && shift 1
  ;;
  *)
  usage
  ;;
esac

CONFIG=
REBUILD_KERNEL=0
while [ $# -ne 0 ]; do
case $1 in
  --repack)
  cleanup_destdir
  ;;
  --rebuild)
  cleanup_workdir
  cleanup_destdir
  ;;
  --rebuild-kernel)
  REBUILD_KERNEL=1
  ;;
  --config|-c)
  CONFIG="$CONFIG $2"
  shift 1
  ;;
  --arch)
  ARCH=$2
  shift 1
  ;;
  --debug)
  set -x
  ;;
  *)
  usage
esac
shift 1
done


if [ "$ARCH" = all ]; then
  [ "$CONFIG" ] && CONFOPT=`echo "$CONFIG" | xargs echo " --config " `
  $0 --arch x86_64 $CONFOPT
  $0 --arch arm $CONFOPT
  $0 --arch arm64 $CONFOPT
  exit $?
fi

# User config
if [ -z "$CONFIG" ]; then
  [ -f $TOPDIR/ermine.config ] && . $TOPDIR/ermine.config
else
  for conf in $CONFIG; do
    . $conf
  done
fi

LINUXDIR=$WORKDIR/linux
BUSYBOXDIR=$WORKDIR/busybox
LIBCAPDIR=$WORKDIR/libcap
ROOTFSDIR=$WORKDIR/rootfs
prepare_arch $ARCH
export ARCH
case "$ARCH" in
  x86_64)
  export CROSS_COMPILE=
  if [ $HOSTARCH != $ARCH ]; then
    echo "Sorry, $ARCH does not support cross build."
    exit 1
  fi
  ;;
  i386|um)
  export CROSS_COMPILE=
  GCC_URL=
  ;;
  arm)
  export CROSS_COMPILE=$CROSS_COMPILE_arm
  GCC_URL=$GCC_arm_URL
  ;;
  arm64)
  export CROSS_COMPILE=$CROSS_COMPILE_arm64
  GCC_URL=$GCC_arm64_URL
  ;;
esac

prepare_workspaces

if [ $HOSTARCH != $ARCH ]; then
  ROOTFSDIR=$WORKDIR/rootfs-$ARCH
  GCCDIR=$WORKDIR/gcc-$ARCH
  setup_source $GCC_URL $GCCDIR
  export PATH="$PATH:"`ls -d $GCCDIR/*/bin`
fi
setup_source $LINUX_URL $LINUXDIR
setup_source $BUSYBOX_URL $BUSYBOXDIR
setup_source $LIBCAP_URL $LIBCAPDIR

echo "Kernel build"
build_kernel $LINUXDIR $REBUILD_KERNEL

echo "busybox build"
build_busybox $BUSYBOXDIR $ROOTFSDIR

echo "libcap build"
build_libcap $LIBCAPDIR $ROOTFSDIR

if [ "$BUILD_MOD" = "yes" ]; then
  echo "kernel module build"
  build_module $LINUXDIR $ROOTFSDIR
fi

echo "install MINCS"
install_mincs $ROOTFSDIR

echo "setup rootfs"
setup_rootfs $ROOTFSDIR

echo "pack initramfs"
pack_initramfs $ROOTFSDIR

ls -sh $DESTDIR
echo "Done"

exit 0
