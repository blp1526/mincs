#!/bin/sh
# minc : Pure shell script mini container command
#
# Copyright (C) 2014,2015 Masami Hiramatsu <masami.hiramatsu@gmail.com>
# This program is released under the MIT License, see LICENSE.
#
# This requires util-linux newer than 2.24 (unshare "-f"
# option and mount correctly support /proc/mounts)

LIBEXEC=`dirname $0`/libexec
MINCEXEC=$LIBEXEC/minc-exec
MINCCOAT=$LIBEXEC/minc-coat

# Exit if any errors
set -e
set -u

usage() { # [error messages]
  test $# -ne 0 && echo "$*"
  echo "$0 - Run given command in a temporary namespace"
  echo "Usage: $0 [options] <command> [argument...]"
  echo " options:"
  echo "    -h or --help        Show this help"
  echo "    -k or --keep        Keep the temporary directory"
  echo "    -t or --tempdir <DIR>  Set DIR for temporary directory (imply -k)"
  echo "    -r or --rootdir <DIR>  Set DIR for original root directory"
  echo "    -X or --X11         Export local X11 unix socket"
  echo "    -n or --net         Use network namespace"
  echo "    -c or --cpu <mask>  Set CPU mask"
  echo "    -p or --pty         Assign new pty for the container"
  echo "    --simple            Simple chroot model (do not pivot_root)"
  echo "    --debug             Debug mode"
  exit $#
}

KEEPDIR=0
MINC_TMPDIR=
export MINC_DEBUG_PREFIX=
export MINC_RWBIND=
export MINC_OPT_SIMPLE=
export MINC_OPT_PTY=
export MINC_CPUMASK=
export MINC_NETNS=
export MINC_DEBUG=
export MINC_BASEDIR=/
# Parse options
while [ "$#" -ne 0 ]; do
case "$1" in
  --keep|-k) # Keep the temporary directory
    KEEPDIR=1
    shift 1
    ;;
  --tempdir|-t) # Give a temporary directory (imply -k)
    test -d "$2" || usage "Error: $2 is not a directory"
    export MINC_TMPDIR=$2
    KEEPDIR=1
    shift 2
    ;;
  --rootdir|-r) # Give a rootdir instead of /
    test -d "$2" || usage "Error: $2 is not a directory"
    export MINC_BASEDIR=$2
    shift 2
    ;;
  --X11|-X) # Export X11 connection
    [ -z "$DISPLAY" ] && usage "Error: \$DISPLAY is empty"
    export MINC_RWBIND="/tmp/.X11-unix"
    shift 1
    ;;
  --net|-n) # Use NetNS
    export MINC_NETNS="minc$$"
    shift 1
    ;;
  --cpu|-c) # Use CPU mask
    MINC_CPUMASK=$2
    shift 2
    ;;
  --simple) # Simple chroot model (do not pivot_root and umount)
    export MINC_OPT_SIMPLE=1
    shift 1
    ;;
  --pty|-p)
    export MINC_OPT_PTY=1
    shift 1
    ;;
  --help|-h) # Help Message
    usage
    ;;
  --debug) # Debug mode
    set -x
    export MINC_DEBUG=1
    shift 1
    ;;
  [!-]*) # User given command
    break
    ;;
  *)
    usage "Parse error: $1 is not supported."
    ;;
esac
done

# Setup temporary directory
if [ -z "$MINC_TMPDIR" ]; then
  export MINC_TMPDIR=`mktemp -d /tmp/minc$$-XXXX`
fi
if [ $KEEPDIR -eq 0 ]; then
  TRAPCMD="rm -rf $MINC_TMPDIR"
else
  TRAPCMD="echo Keep $MINC_TMPDIR"
fi
trap "$TRAPCMD" EXIT

# Setup Network Namespace
if [ "$MINC_NETNS" ]; then
  ip netns add $MINC_NETNS
  TRAPCMD="ip netns del $MINC_NETNS;$TRAPCMD"
  trap "$TRAPCMD" EXIT
  export MINC_NETNSIF=vminc$$
  ip link add name $MINC_NETNSIF type veth peer name veth$$
  ip link set $MINC_NETNSIF netns $MINC_NETNS
fi

# Setup overlaid rootfs
UM=`$MINCCOAT`
TRAPCMD="$UM;$TRAPCMD"; trap "$TRAPCMD" EXIT
trap '' INT

$MINCEXEC $@
