#!/bin/sh
# minc-core : Pure shell script mini container core script
#
# Copyright (C) 2014,2015 Masami Hiramatsu <masami.hiramatsu@gmail.com>
# This program is released under the MIT License, see LICENSE.

# Exit if any errors
set -e
test "$MINC_DEBUG" && set -x

# Ensure parameters are set
test -d "$MINC_TMPDIR"
test -d "$MINC_TMPDIR/root"

rwbind() { # dir
  mount --bind $1 $RD$1
}

robind() { # dir
  mount --bind -o ro $1 $RD$1
}

grepumount() { # patterns
  cut -f 2 -d " " < /proc/mounts | grep $@ | sort -r | xargs umount 2>/dev/null || echo -n ""
}

# If PID=1, this is in the new world
if [ $$ -eq 1 ]; then
  RD=$MINC_TMPDIR/root

  # Make private mount namespace
  mount --make-rprivate /

  # Do not update /etc/mtab since the mount is private
  export LIBMOUNT_MTAB=/proc/mounts

  mkdir -p $RD/etc $RD/dev $RD/sys $RD/proc

  # Hide /etc/mtab in this namespace
  if [ ! -L $RD/etc/mtab ]; then
    rm -f $RD/etc/mtab
    ln -s /proc/mounts $RD/etc/mtab
  fi

  # Prepare /dev special files
  mount -t tmpfs tmpfs $RD/dev
  # Prepare pts
  mkdir $RD/dev/pts
  mount devpts -t devpts -onoexec,nosuid,gid=5,mode=0620,newinstance,ptmxmode=0666 $RD/dev/pts
  ln -s /dev/pts/ptmx $RD/dev/ptmx
  touch $RD/dev/console; rwbind /dev/console
  touch $RD/dev/null; rwbind /dev/null
  touch $RD/dev/zero; robind /dev/zero
  test -d /dev/mqueue && mkdir $RD/dev/mqueue && rwbind /dev/mqueue
  # TODO: Add other devices here

  # Do not bind procfs, since it shows outside pids
  mount -t proc proc $RD/proc
  robind /proc/sys
  robind /proc/sysrq-trigger
  robind /proc/irq
  robind /proc/bus
  robind /sys

  if [ "$MINC_RWBIND" ]; then
    for i in $MINC_RWBIND; do
      test -d $i && mkdir -p $i
      test -f $i && touch $i
      rwbind $i
    done
  fi

  if [ "$MINC_OPT_SIMPLE" ]; then
    # Simply umount unused mount points
    grepumount -e "^/sys" -e "^/dev" -e "^/run"
  else
    # To unmount all unused mountpoints, use pivot_root to change root
    cd $RD
    mkdir -p .orig
    pivot_root . .orig
    grepumount -e "^/\.orig/"
    # The original root can not unmount because it referred by overlayfs.
    # So, we pivot to the root again, and chroot to overlay directory.
    cd /.orig/
    pivot_root . mnt/
    RD=mnt/
  fi
  if [ "$MINC_OPT_PTY" ]; then
    # HACK: Open an pty for containers
    cat < $RD/dev/pts/ptmx > $RD/dev/null &
  fi
  exec $MINC_DEBUG_PREFIX chroot $RD $@
fi

# Setup CPU and network limitations
IP_NETNS=
test "$MINC_NETNS" && IP_NETNS="ip netns exec $MINC_NETNS "
test "$MINC_CPUMASK" && taskset -ap $MINC_CPUMASK $$ > /dev/null

trap '' INT

# Enter new namespace and exec command
$IP_NETNS unshare -iumpf $0 $@
