#!/bin/sh
# minc-moult: MINC-container run in cross arch by qemu-system
#
# Copyright (C) 2016 Masami Hiramatsu <masami.hiramatsu@gmail.com>
# This program is released under the MIT License, see LICENSE.

# Normalize ARCH and setup qemu related variables
prepare_arch() { # arch
  ARCH=$1
  HOSTARCH=`uname -m`
  [ -z "$ARCH" ] && ARCH=$HOSTARCH
  case "$ARCH" in
  x86_64|amd64)
    ARCH=x86_64
    QEMU_TTY=ttyS0
    QEMU_ARCH=$ARCH
    QEMU_OPT="$QEMU_OPT -M pc -enable-kvm"
    ;;
  i[3456]86)
    ARCH=i386
    QEMU_TTY=ttyS0
    QEMU_ARCH=$ARCH
    QEMU_OPT="$QEMU_OPT -M pc -enable-kvm"
    ;;
  arm|armv7l)
    ARCH=arm
    QEMU_TTY=ttyAMA0
    QEMU_ARCH=$ARCH
    QEMU_OPT="$QEMU_OPT -M virt"
    ;;
  aarch64|arm64)
    ARCH=arm64
    QEMU_TTY=ttyAMA0
    QEMU_ARCH=aarch64
    QEMU_OPT="$QEMU_OPT -M virt -cpu cortex-a57"
    ;;
  um|uml)
    ARCH=um
    QEMU_TTY=tty0
    UM_OPT=""
    ;;
  *)
    echo "Sorry, $ARCH is not supported yet."
    exit 1
    ;;
  esac
}

# Launch qemu for given arch. If you'd like initrd, you need to pass
# "root=/dev/ram0 rootfstype=ext2" to kernel_opt
minc_moult() { # arch virtdir kernel_opt
  ERMINEDIR=$LIBEXEC/ermine
  prepare_arch $1
  [ $ARCH = "um" ] && exec $ERMINEDIR/vmlinuz.$ARCH mem=512M \
	  initrd=$ERMINEDIR/initramfs.$ARCH hostfs=$2 con0=fd:0,fd:1 con1=null con=pts $3 console=ttyS0
  exec qemu-system-${QEMU_ARCH} $QEMU_OPT -m 512M \
    -kernel $ERMINEDIR/vmlinuz.$ARCH -initrd $ERMINEDIR/initramfs.$ARCH \
    -nographic -append "$3 console=tty0" \
    -virtfs local,id=minc,path=$2,security_model=none,mount_tag=minc
}

